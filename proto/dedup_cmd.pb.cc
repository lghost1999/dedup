// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dedup_cmd.proto

#include "dedup_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dedup_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fringerprint_dedup_5fcmd_2eproto;
namespace dedup {
class FringerprintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fringerprint> _instance;
} _Fringerprint_default_instance_;
class QueryFringerprintRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryFringerprintRequest> _instance;
} _QueryFringerprintRequest_default_instance_;
class QueryFringerprintResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryFringerprintResponse> _instance;
} _QueryFringerprintResponse_default_instance_;
class StorageChunkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageChunkRequest> _instance;
} _StorageChunkRequest_default_instance_;
class StorageChunkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StorageChunkResponse> _instance;
} _StorageChunkResponse_default_instance_;
class RestoreFileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreFileRequest> _instance;
} _RestoreFileRequest_default_instance_;
class RestoreFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreFileResponse> _instance;
} _RestoreFileResponse_default_instance_;
}  // namespace dedup
static void InitDefaultsscc_info_Fringerprint_dedup_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dedup::_Fringerprint_default_instance_;
    new (ptr) ::dedup::Fringerprint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dedup::Fringerprint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fringerprint_dedup_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fringerprint_dedup_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_QueryFringerprintRequest_dedup_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dedup::_QueryFringerprintRequest_default_instance_;
    new (ptr) ::dedup::QueryFringerprintRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dedup::QueryFringerprintRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryFringerprintRequest_dedup_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryFringerprintRequest_dedup_5fcmd_2eproto}, {
      &scc_info_Fringerprint_dedup_5fcmd_2eproto.base,}};

static void InitDefaultsscc_info_QueryFringerprintResponse_dedup_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dedup::_QueryFringerprintResponse_default_instance_;
    new (ptr) ::dedup::QueryFringerprintResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dedup::QueryFringerprintResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryFringerprintResponse_dedup_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryFringerprintResponse_dedup_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_RestoreFileRequest_dedup_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dedup::_RestoreFileRequest_default_instance_;
    new (ptr) ::dedup::RestoreFileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dedup::RestoreFileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestoreFileRequest_dedup_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RestoreFileRequest_dedup_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_RestoreFileResponse_dedup_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dedup::_RestoreFileResponse_default_instance_;
    new (ptr) ::dedup::RestoreFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dedup::RestoreFileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestoreFileResponse_dedup_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RestoreFileResponse_dedup_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_StorageChunkRequest_dedup_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dedup::_StorageChunkRequest_default_instance_;
    new (ptr) ::dedup::StorageChunkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dedup::StorageChunkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StorageChunkRequest_dedup_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StorageChunkRequest_dedup_5fcmd_2eproto}, {
      &scc_info_Fringerprint_dedup_5fcmd_2eproto.base,}};

static void InitDefaultsscc_info_StorageChunkResponse_dedup_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dedup::_StorageChunkResponse_default_instance_;
    new (ptr) ::dedup::StorageChunkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dedup::StorageChunkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StorageChunkResponse_dedup_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StorageChunkResponse_dedup_5fcmd_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dedup_5fcmd_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dedup_5fcmd_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_dedup_5fcmd_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dedup_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dedup::Fringerprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dedup::Fringerprint, high_),
  PROTOBUF_FIELD_OFFSET(::dedup::Fringerprint, low_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dedup::QueryFringerprintRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dedup::QueryFringerprintRequest, remote_filename_),
  PROTOBUF_FIELD_OFFSET(::dedup::QueryFringerprintRequest, backup_time_),
  PROTOBUF_FIELD_OFFSET(::dedup::QueryFringerprintRequest, bit_),
  PROTOBUF_FIELD_OFFSET(::dedup::QueryFringerprintRequest, fringerprint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dedup::QueryFringerprintResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dedup::QueryFringerprintResponse, result_),
  PROTOBUF_FIELD_OFFSET(::dedup::QueryFringerprintResponse, bit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dedup::StorageChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dedup::StorageChunkRequest, remote_filename_),
  PROTOBUF_FIELD_OFFSET(::dedup::StorageChunkRequest, fringerprint_),
  PROTOBUF_FIELD_OFFSET(::dedup::StorageChunkRequest, chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dedup::StorageChunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dedup::StorageChunkResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dedup::RestoreFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dedup::RestoreFileRequest, remote_filename_),
  PROTOBUF_FIELD_OFFSET(::dedup::RestoreFileRequest, backup_time_),
  PROTOBUF_FIELD_OFFSET(::dedup::RestoreFileRequest, local_filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dedup::RestoreFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dedup::RestoreFileResponse, result_),
  PROTOBUF_FIELD_OFFSET(::dedup::RestoreFileResponse, file_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dedup::Fringerprint)},
  { 7, -1, sizeof(::dedup::QueryFringerprintRequest)},
  { 16, -1, sizeof(::dedup::QueryFringerprintResponse)},
  { 23, -1, sizeof(::dedup::StorageChunkRequest)},
  { 31, -1, sizeof(::dedup::StorageChunkResponse)},
  { 37, -1, sizeof(::dedup::RestoreFileRequest)},
  { 45, -1, sizeof(::dedup::RestoreFileResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dedup::_Fringerprint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dedup::_QueryFringerprintRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dedup::_QueryFringerprintResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dedup::_StorageChunkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dedup::_StorageChunkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dedup::_RestoreFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dedup::_RestoreFileResponse_default_instance_),
};

const char descriptor_table_protodef_dedup_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dedup_cmd.proto\022\005dedup\")\n\014Fringerprint"
  "\022\014\n\004high\030\001 \001(\004\022\013\n\003low\030\002 \001(\004\"\200\001\n\030QueryFri"
  "ngerprintRequest\022\027\n\017remote_filename\030\001 \001("
  "\t\022\023\n\013backup_time\030\002 \001(\t\022\013\n\003bit\030\003 \003(\004\022)\n\014f"
  "ringerprint\030\004 \003(\0132\023.dedup.Fringerprint\"8"
  "\n\031QueryFringerprintResponse\022\016\n\006result\030\001 "
  "\001(\010\022\013\n\003bit\030\002 \003(\004\"h\n\023StorageChunkRequest\022"
  "\027\n\017remote_filename\030\001 \001(\t\022)\n\014fringerprint"
  "\030\002 \003(\0132\023.dedup.Fringerprint\022\r\n\005chunk\030\003 \003"
  "(\014\"&\n\024StorageChunkResponse\022\016\n\006result\030\001 \001"
  "(\010\"Z\n\022RestoreFileRequest\022\027\n\017remote_filen"
  "ame\030\001 \001(\t\022\023\n\013backup_time\030\002 \001(\t\022\026\n\016local_"
  "filename\030\003 \001(\t\"8\n\023RestoreFileResponse\022\016\n"
  "\006result\030\001 \001(\010\022\021\n\tfile_data\030\002 \001(\0142\365\001\n\014Ded"
  "upService\022V\n\021QueryFringerprint\022\037.dedup.Q"
  "ueryFringerprintRequest\032 .dedup.QueryFri"
  "ngerprintResponse\022G\n\014StorageChunk\022\032.dedu"
  "p.StorageChunkRequest\032\033.dedup.StorageChu"
  "nkResponse\022D\n\013RestoreFile\022\031.dedup.Restor"
  "eFileRequest\032\032.dedup.RestoreFileResponse"
  "B\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dedup_5fcmd_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dedup_5fcmd_2eproto_sccs[7] = {
  &scc_info_Fringerprint_dedup_5fcmd_2eproto.base,
  &scc_info_QueryFringerprintRequest_dedup_5fcmd_2eproto.base,
  &scc_info_QueryFringerprintResponse_dedup_5fcmd_2eproto.base,
  &scc_info_RestoreFileRequest_dedup_5fcmd_2eproto.base,
  &scc_info_RestoreFileResponse_dedup_5fcmd_2eproto.base,
  &scc_info_StorageChunkRequest_dedup_5fcmd_2eproto.base,
  &scc_info_StorageChunkResponse_dedup_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dedup_5fcmd_2eproto_once;
static bool descriptor_table_dedup_5fcmd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dedup_5fcmd_2eproto = {
  &descriptor_table_dedup_5fcmd_2eproto_initialized, descriptor_table_protodef_dedup_5fcmd_2eproto, "dedup_cmd.proto", 813,
  &descriptor_table_dedup_5fcmd_2eproto_once, descriptor_table_dedup_5fcmd_2eproto_sccs, descriptor_table_dedup_5fcmd_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_dedup_5fcmd_2eproto::offsets,
  file_level_metadata_dedup_5fcmd_2eproto, 7, file_level_enum_descriptors_dedup_5fcmd_2eproto, file_level_service_descriptors_dedup_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dedup_5fcmd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dedup_5fcmd_2eproto), true);
namespace dedup {

// ===================================================================

void Fringerprint::InitAsDefaultInstance() {
}
class Fringerprint::_Internal {
 public:
};

Fringerprint::Fringerprint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dedup.Fringerprint)
}
Fringerprint::Fringerprint(const Fringerprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
  // @@protoc_insertion_point(copy_constructor:dedup.Fringerprint)
}

void Fringerprint::SharedCtor() {
  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
}

Fringerprint::~Fringerprint() {
  // @@protoc_insertion_point(destructor:dedup.Fringerprint)
  SharedDtor();
}

void Fringerprint::SharedDtor() {
}

void Fringerprint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fringerprint& Fringerprint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fringerprint_dedup_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void Fringerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:dedup.Fringerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
  _internal_metadata_.Clear();
}

const char* Fringerprint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fringerprint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dedup.Fringerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_high(), target);
  }

  // uint64 low = 2;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_low(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dedup.Fringerprint)
  return target;
}

size_t Fringerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dedup.Fringerprint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_high());
  }

  // uint64 low = 2;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_low());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fringerprint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dedup.Fringerprint)
  GOOGLE_DCHECK_NE(&from, this);
  const Fringerprint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fringerprint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dedup.Fringerprint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dedup.Fringerprint)
    MergeFrom(*source);
  }
}

void Fringerprint::MergeFrom(const Fringerprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dedup.Fringerprint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
}

void Fringerprint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dedup.Fringerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fringerprint::CopyFrom(const Fringerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dedup.Fringerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fringerprint::IsInitialized() const {
  return true;
}

void Fringerprint::InternalSwap(Fringerprint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(high_, other->high_);
  swap(low_, other->low_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fringerprint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryFringerprintRequest::InitAsDefaultInstance() {
}
class QueryFringerprintRequest::_Internal {
 public:
};

QueryFringerprintRequest::QueryFringerprintRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dedup.QueryFringerprintRequest)
}
QueryFringerprintRequest::QueryFringerprintRequest(const QueryFringerprintRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bit_(from.bit_),
      fringerprint_(from.fringerprint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_filename().empty()) {
    remote_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_filename_);
  }
  backup_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_backup_time().empty()) {
    backup_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backup_time_);
  }
  // @@protoc_insertion_point(copy_constructor:dedup.QueryFringerprintRequest)
}

void QueryFringerprintRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryFringerprintRequest_dedup_5fcmd_2eproto.base);
  remote_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backup_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryFringerprintRequest::~QueryFringerprintRequest() {
  // @@protoc_insertion_point(destructor:dedup.QueryFringerprintRequest)
  SharedDtor();
}

void QueryFringerprintRequest::SharedDtor() {
  remote_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backup_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryFringerprintRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryFringerprintRequest& QueryFringerprintRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryFringerprintRequest_dedup_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void QueryFringerprintRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dedup.QueryFringerprintRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bit_.Clear();
  fringerprint_.Clear();
  remote_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backup_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* QueryFringerprintRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dedup.QueryFringerprintRequest.remote_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string backup_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_backup_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dedup.QueryFringerprintRequest.backup_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 bit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_bit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_bit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dedup.Fringerprint fringerprint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fringerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryFringerprintRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dedup.QueryFringerprintRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_filename = 1;
  if (this->remote_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_filename().data(), static_cast<int>(this->_internal_remote_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dedup.QueryFringerprintRequest.remote_filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_filename(), target);
  }

  // string backup_time = 2;
  if (this->backup_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backup_time().data(), static_cast<int>(this->_internal_backup_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dedup.QueryFringerprintRequest.backup_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_backup_time(), target);
  }

  // repeated uint64 bit = 3;
  {
    int byte_size = _bit_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_bit(), byte_size, target);
    }
  }

  // repeated .dedup.Fringerprint fringerprint = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fringerprint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fringerprint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dedup.QueryFringerprintRequest)
  return target;
}

size_t QueryFringerprintRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dedup.QueryFringerprintRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 bit = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->bit_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bit_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .dedup.Fringerprint fringerprint = 4;
  total_size += 1UL * this->_internal_fringerprint_size();
  for (const auto& msg : this->fringerprint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string remote_filename = 1;
  if (this->remote_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_filename());
  }

  // string backup_time = 2;
  if (this->backup_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backup_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryFringerprintRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dedup.QueryFringerprintRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryFringerprintRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryFringerprintRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dedup.QueryFringerprintRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dedup.QueryFringerprintRequest)
    MergeFrom(*source);
  }
}

void QueryFringerprintRequest::MergeFrom(const QueryFringerprintRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dedup.QueryFringerprintRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bit_.MergeFrom(from.bit_);
  fringerprint_.MergeFrom(from.fringerprint_);
  if (from.remote_filename().size() > 0) {

    remote_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_filename_);
  }
  if (from.backup_time().size() > 0) {

    backup_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backup_time_);
  }
}

void QueryFringerprintRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dedup.QueryFringerprintRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFringerprintRequest::CopyFrom(const QueryFringerprintRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dedup.QueryFringerprintRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFringerprintRequest::IsInitialized() const {
  return true;
}

void QueryFringerprintRequest::InternalSwap(QueryFringerprintRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bit_.InternalSwap(&other->bit_);
  fringerprint_.InternalSwap(&other->fringerprint_);
  remote_filename_.Swap(&other->remote_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  backup_time_.Swap(&other->backup_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFringerprintRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryFringerprintResponse::InitAsDefaultInstance() {
}
class QueryFringerprintResponse::_Internal {
 public:
};

QueryFringerprintResponse::QueryFringerprintResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dedup.QueryFringerprintResponse)
}
QueryFringerprintResponse::QueryFringerprintResponse(const QueryFringerprintResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bit_(from.bit_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:dedup.QueryFringerprintResponse)
}

void QueryFringerprintResponse::SharedCtor() {
  result_ = false;
}

QueryFringerprintResponse::~QueryFringerprintResponse() {
  // @@protoc_insertion_point(destructor:dedup.QueryFringerprintResponse)
  SharedDtor();
}

void QueryFringerprintResponse::SharedDtor() {
}

void QueryFringerprintResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryFringerprintResponse& QueryFringerprintResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryFringerprintResponse_dedup_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void QueryFringerprintResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dedup.QueryFringerprintResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bit_.Clear();
  result_ = false;
  _internal_metadata_.Clear();
}

const char* QueryFringerprintResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 bit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_bit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryFringerprintResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dedup.QueryFringerprintResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // repeated uint64 bit = 2;
  {
    int byte_size = _bit_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_bit(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dedup.QueryFringerprintResponse)
  return target;
}

size_t QueryFringerprintResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dedup.QueryFringerprintResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 bit = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->bit_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bit_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryFringerprintResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dedup.QueryFringerprintResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryFringerprintResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryFringerprintResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dedup.QueryFringerprintResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dedup.QueryFringerprintResponse)
    MergeFrom(*source);
  }
}

void QueryFringerprintResponse::MergeFrom(const QueryFringerprintResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dedup.QueryFringerprintResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bit_.MergeFrom(from.bit_);
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void QueryFringerprintResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dedup.QueryFringerprintResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFringerprintResponse::CopyFrom(const QueryFringerprintResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dedup.QueryFringerprintResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFringerprintResponse::IsInitialized() const {
  return true;
}

void QueryFringerprintResponse::InternalSwap(QueryFringerprintResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bit_.InternalSwap(&other->bit_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFringerprintResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StorageChunkRequest::InitAsDefaultInstance() {
}
class StorageChunkRequest::_Internal {
 public:
};

StorageChunkRequest::StorageChunkRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dedup.StorageChunkRequest)
}
StorageChunkRequest::StorageChunkRequest(const StorageChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fringerprint_(from.fringerprint_),
      chunk_(from.chunk_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_filename().empty()) {
    remote_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_filename_);
  }
  // @@protoc_insertion_point(copy_constructor:dedup.StorageChunkRequest)
}

void StorageChunkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StorageChunkRequest_dedup_5fcmd_2eproto.base);
  remote_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StorageChunkRequest::~StorageChunkRequest() {
  // @@protoc_insertion_point(destructor:dedup.StorageChunkRequest)
  SharedDtor();
}

void StorageChunkRequest::SharedDtor() {
  remote_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StorageChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageChunkRequest& StorageChunkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageChunkRequest_dedup_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void StorageChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dedup.StorageChunkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fringerprint_.Clear();
  chunk_.Clear();
  remote_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* StorageChunkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dedup.StorageChunkRequest.remote_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dedup.Fringerprint fringerprint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fringerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_chunk();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageChunkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dedup.StorageChunkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_filename = 1;
  if (this->remote_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_filename().data(), static_cast<int>(this->_internal_remote_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dedup.StorageChunkRequest.remote_filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_filename(), target);
  }

  // repeated .dedup.Fringerprint fringerprint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fringerprint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fringerprint(i), target, stream);
  }

  // repeated bytes chunk = 3;
  for (int i = 0, n = this->_internal_chunk_size(); i < n; i++) {
    const auto& s = this->_internal_chunk(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dedup.StorageChunkRequest)
  return target;
}

size_t StorageChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dedup.StorageChunkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dedup.Fringerprint fringerprint = 2;
  total_size += 1UL * this->_internal_fringerprint_size();
  for (const auto& msg : this->fringerprint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes chunk = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(chunk_.size());
  for (int i = 0, n = chunk_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      chunk_.Get(i));
  }

  // string remote_filename = 1;
  if (this->remote_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageChunkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dedup.StorageChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageChunkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageChunkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dedup.StorageChunkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dedup.StorageChunkRequest)
    MergeFrom(*source);
  }
}

void StorageChunkRequest::MergeFrom(const StorageChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dedup.StorageChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fringerprint_.MergeFrom(from.fringerprint_);
  chunk_.MergeFrom(from.chunk_);
  if (from.remote_filename().size() > 0) {

    remote_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_filename_);
  }
}

void StorageChunkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dedup.StorageChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageChunkRequest::CopyFrom(const StorageChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dedup.StorageChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageChunkRequest::IsInitialized() const {
  return true;
}

void StorageChunkRequest::InternalSwap(StorageChunkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fringerprint_.InternalSwap(&other->fringerprint_);
  chunk_.InternalSwap(&other->chunk_);
  remote_filename_.Swap(&other->remote_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageChunkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StorageChunkResponse::InitAsDefaultInstance() {
}
class StorageChunkResponse::_Internal {
 public:
};

StorageChunkResponse::StorageChunkResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dedup.StorageChunkResponse)
}
StorageChunkResponse::StorageChunkResponse(const StorageChunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:dedup.StorageChunkResponse)
}

void StorageChunkResponse::SharedCtor() {
  result_ = false;
}

StorageChunkResponse::~StorageChunkResponse() {
  // @@protoc_insertion_point(destructor:dedup.StorageChunkResponse)
  SharedDtor();
}

void StorageChunkResponse::SharedDtor() {
}

void StorageChunkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageChunkResponse& StorageChunkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StorageChunkResponse_dedup_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void StorageChunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dedup.StorageChunkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear();
}

const char* StorageChunkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StorageChunkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dedup.StorageChunkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dedup.StorageChunkResponse)
  return target;
}

size_t StorageChunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dedup.StorageChunkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageChunkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dedup.StorageChunkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageChunkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StorageChunkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dedup.StorageChunkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dedup.StorageChunkResponse)
    MergeFrom(*source);
  }
}

void StorageChunkResponse::MergeFrom(const StorageChunkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dedup.StorageChunkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void StorageChunkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dedup.StorageChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageChunkResponse::CopyFrom(const StorageChunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dedup.StorageChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageChunkResponse::IsInitialized() const {
  return true;
}

void StorageChunkResponse::InternalSwap(StorageChunkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageChunkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreFileRequest::InitAsDefaultInstance() {
}
class RestoreFileRequest::_Internal {
 public:
};

RestoreFileRequest::RestoreFileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dedup.RestoreFileRequest)
}
RestoreFileRequest::RestoreFileRequest(const RestoreFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_filename().empty()) {
    remote_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_filename_);
  }
  backup_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_backup_time().empty()) {
    backup_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backup_time_);
  }
  local_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_filename().empty()) {
    local_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_filename_);
  }
  // @@protoc_insertion_point(copy_constructor:dedup.RestoreFileRequest)
}

void RestoreFileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreFileRequest_dedup_5fcmd_2eproto.base);
  remote_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backup_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RestoreFileRequest::~RestoreFileRequest() {
  // @@protoc_insertion_point(destructor:dedup.RestoreFileRequest)
  SharedDtor();
}

void RestoreFileRequest::SharedDtor() {
  remote_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backup_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestoreFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreFileRequest& RestoreFileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreFileRequest_dedup_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void RestoreFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dedup.RestoreFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backup_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RestoreFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dedup.RestoreFileRequest.remote_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string backup_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_backup_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dedup.RestoreFileRequest.backup_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_local_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dedup.RestoreFileRequest.local_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreFileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dedup.RestoreFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_filename = 1;
  if (this->remote_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_filename().data(), static_cast<int>(this->_internal_remote_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dedup.RestoreFileRequest.remote_filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_filename(), target);
  }

  // string backup_time = 2;
  if (this->backup_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_backup_time().data(), static_cast<int>(this->_internal_backup_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dedup.RestoreFileRequest.backup_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_backup_time(), target);
  }

  // string local_filename = 3;
  if (this->local_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_filename().data(), static_cast<int>(this->_internal_local_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dedup.RestoreFileRequest.local_filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_local_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dedup.RestoreFileRequest)
  return target;
}

size_t RestoreFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dedup.RestoreFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_filename = 1;
  if (this->remote_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_filename());
  }

  // string backup_time = 2;
  if (this->backup_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_backup_time());
  }

  // string local_filename = 3;
  if (this->local_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dedup.RestoreFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dedup.RestoreFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dedup.RestoreFileRequest)
    MergeFrom(*source);
  }
}

void RestoreFileRequest::MergeFrom(const RestoreFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dedup.RestoreFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_filename().size() > 0) {

    remote_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_filename_);
  }
  if (from.backup_time().size() > 0) {

    backup_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backup_time_);
  }
  if (from.local_filename().size() > 0) {

    local_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_filename_);
  }
}

void RestoreFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dedup.RestoreFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreFileRequest::CopyFrom(const RestoreFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dedup.RestoreFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreFileRequest::IsInitialized() const {
  return true;
}

void RestoreFileRequest::InternalSwap(RestoreFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remote_filename_.Swap(&other->remote_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  backup_time_.Swap(&other->backup_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_filename_.Swap(&other->local_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreFileResponse::InitAsDefaultInstance() {
}
class RestoreFileResponse::_Internal {
 public:
};

RestoreFileResponse::RestoreFileResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dedup.RestoreFileResponse)
}
RestoreFileResponse::RestoreFileResponse(const RestoreFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_data().empty()) {
    file_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_data_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:dedup.RestoreFileResponse)
}

void RestoreFileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreFileResponse_dedup_5fcmd_2eproto.base);
  file_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
}

RestoreFileResponse::~RestoreFileResponse() {
  // @@protoc_insertion_point(destructor:dedup.RestoreFileResponse)
  SharedDtor();
}

void RestoreFileResponse::SharedDtor() {
  file_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestoreFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreFileResponse& RestoreFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreFileResponse_dedup_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void RestoreFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dedup.RestoreFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
  _internal_metadata_.Clear();
}

const char* RestoreFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes file_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dedup.RestoreFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // bytes file_data = 2;
  if (this->file_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_file_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dedup.RestoreFileResponse)
  return target;
}

size_t RestoreFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dedup.RestoreFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes file_data = 2;
  if (this->file_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_data());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dedup.RestoreFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dedup.RestoreFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dedup.RestoreFileResponse)
    MergeFrom(*source);
  }
}

void RestoreFileResponse::MergeFrom(const RestoreFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dedup.RestoreFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_data().size() > 0) {

    file_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_data_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void RestoreFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dedup.RestoreFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreFileResponse::CopyFrom(const RestoreFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dedup.RestoreFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreFileResponse::IsInitialized() const {
  return true;
}

void RestoreFileResponse::InternalSwap(RestoreFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_data_.Swap(&other->file_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DedupService::~DedupService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DedupService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dedup_5fcmd_2eproto);
  return file_level_service_descriptors_dedup_5fcmd_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DedupService::GetDescriptor() {
  return descriptor();
}

void DedupService::QueryFringerprint(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dedup::QueryFringerprintRequest*,
                         ::dedup::QueryFringerprintResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryFringerprint() not implemented.");
  done->Run();
}

void DedupService::StorageChunk(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dedup::StorageChunkRequest*,
                         ::dedup::StorageChunkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StorageChunk() not implemented.");
  done->Run();
}

void DedupService::RestoreFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dedup::RestoreFileRequest*,
                         ::dedup::RestoreFileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RestoreFile() not implemented.");
  done->Run();
}

void DedupService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_dedup_5fcmd_2eproto[0]);
  switch(method->index()) {
    case 0:
      QueryFringerprint(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dedup::QueryFringerprintRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dedup::QueryFringerprintResponse*>(
                 response),
             done);
      break;
    case 1:
      StorageChunk(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dedup::StorageChunkRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dedup::StorageChunkResponse*>(
                 response),
             done);
      break;
    case 2:
      RestoreFile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dedup::RestoreFileRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dedup::RestoreFileResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DedupService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dedup::QueryFringerprintRequest::default_instance();
    case 1:
      return ::dedup::StorageChunkRequest::default_instance();
    case 2:
      return ::dedup::RestoreFileRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DedupService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dedup::QueryFringerprintResponse::default_instance();
    case 1:
      return ::dedup::StorageChunkResponse::default_instance();
    case 2:
      return ::dedup::RestoreFileResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DedupService_Stub::DedupService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DedupService_Stub::DedupService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DedupService_Stub::~DedupService_Stub() {
  if (owns_channel_) delete channel_;
}

void DedupService_Stub::QueryFringerprint(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dedup::QueryFringerprintRequest* request,
                              ::dedup::QueryFringerprintResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DedupService_Stub::StorageChunk(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dedup::StorageChunkRequest* request,
                              ::dedup::StorageChunkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DedupService_Stub::RestoreFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dedup::RestoreFileRequest* request,
                              ::dedup::RestoreFileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dedup
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dedup::Fringerprint* Arena::CreateMaybeMessage< ::dedup::Fringerprint >(Arena* arena) {
  return Arena::CreateInternal< ::dedup::Fringerprint >(arena);
}
template<> PROTOBUF_NOINLINE ::dedup::QueryFringerprintRequest* Arena::CreateMaybeMessage< ::dedup::QueryFringerprintRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dedup::QueryFringerprintRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dedup::QueryFringerprintResponse* Arena::CreateMaybeMessage< ::dedup::QueryFringerprintResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dedup::QueryFringerprintResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dedup::StorageChunkRequest* Arena::CreateMaybeMessage< ::dedup::StorageChunkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dedup::StorageChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dedup::StorageChunkResponse* Arena::CreateMaybeMessage< ::dedup::StorageChunkResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dedup::StorageChunkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dedup::RestoreFileRequest* Arena::CreateMaybeMessage< ::dedup::RestoreFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dedup::RestoreFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dedup::RestoreFileResponse* Arena::CreateMaybeMessage< ::dedup::RestoreFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::dedup::RestoreFileResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
